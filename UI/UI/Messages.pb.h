// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include "google/protobuf/stubs/common.h"

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Header;
class point;
class move;

// ===================================================================

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Header)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class point : public ::google::protobuf::Message {
 public:
  point();
  virtual ~point();

  point(const point& from);

  inline point& operator=(const point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const point& default_instance();

  void Swap(point* other);

  // implements Message ----------------------------------------------

  point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const point& from);
  void MergeFrom(const point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static point* default_instance_;
};
// -------------------------------------------------------------------

class move : public ::google::protobuf::Message {
 public:
  move();
  virtual ~move();

  move(const move& from);

  inline move& operator=(const move& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const move& default_instance();

  void Swap(move* other);

  // implements Message ----------------------------------------------

  move* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const move& from);
  void MergeFrom(const move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .point from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::point& from() const;
  inline ::point* mutable_from();
  inline ::point* release_from();
  inline void set_allocated_from(::point* from);

  // required .point to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::point& to() const;
  inline ::point* mutable_to();
  inline ::point* release_to();
  inline void set_allocated_to(::point* to);

  // optional .point killed = 3;
  inline bool has_killed() const;
  inline void clear_killed();
  static const int kKilledFieldNumber = 3;
  inline const ::point& killed() const;
  inline ::point* mutable_killed();
  inline ::point* release_killed();
  inline void set_allocated_killed(::point* killed);

  // required bool finished = 4;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 4;
  inline bool finished() const;
  inline void set_finished(bool value);

  // @@protoc_insertion_point(class_scope:move)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_killed();
  inline void clear_has_killed();
  inline void set_has_finished();
  inline void clear_has_finished();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::point* from_;
  ::point* to_;
  ::point* killed_;
  bool finished_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();

  void InitAsDefaultInstance();
  static move* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// -------------------------------------------------------------------

// point

// required int32 x = 1;
inline bool point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 point::x() const {
  return x_;
}
inline void point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 point::y() const {
  return y_;
}
inline void point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// move

// required .point from = 1;
inline bool move::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void move::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void move::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void move::clear_from() {
  if (from_ != NULL) from_->::point::Clear();
  clear_has_from();
}
inline const ::point& move::from() const {
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::point* move::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::point;
  return from_;
}
inline ::point* move::release_from() {
  clear_has_from();
  ::point* temp = from_;
  from_ = NULL;
  return temp;
}
inline void move::set_allocated_from(::point* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
}

// required .point to = 2;
inline bool move::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void move::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void move::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void move::clear_to() {
  if (to_ != NULL) to_->::point::Clear();
  clear_has_to();
}
inline const ::point& move::to() const {
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
inline ::point* move::mutable_to() {
  set_has_to();
  if (to_ == NULL) to_ = new ::point;
  return to_;
}
inline ::point* move::release_to() {
  clear_has_to();
  ::point* temp = to_;
  to_ = NULL;
  return temp;
}
inline void move::set_allocated_to(::point* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
}

// optional .point killed = 3;
inline bool move::has_killed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void move::set_has_killed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void move::clear_has_killed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void move::clear_killed() {
  if (killed_ != NULL) killed_->::point::Clear();
  clear_has_killed();
}
inline const ::point& move::killed() const {
  return killed_ != NULL ? *killed_ : *default_instance_->killed_;
}
inline ::point* move::mutable_killed() {
  set_has_killed();
  if (killed_ == NULL) killed_ = new ::point;
  return killed_;
}
inline ::point* move::release_killed() {
  clear_has_killed();
  ::point* temp = killed_;
  killed_ = NULL;
  return temp;
}
inline void move::set_allocated_killed(::point* killed) {
  delete killed_;
  killed_ = killed;
  if (killed) {
    set_has_killed();
  } else {
    clear_has_killed();
  }
}

// required bool finished = 4;
inline bool move::has_finished() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void move::set_has_finished() {
  _has_bits_[0] |= 0x00000008u;
}
inline void move::clear_has_finished() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void move::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool move::finished() const {
  return finished_;
}
inline void move::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
